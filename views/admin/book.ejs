<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'brand-primary': '#3B82F6',
                        'brand-secondary': '#10B981',
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gray-100 min-h-screen p-4 sm:p-6">
    <div class="container mx-auto max-w-7xl">
        <h1 class="text-3xl sm:text-4xl font-bold text-center mb-6 sm:mb-8 text-gray-800">Book Management System</h1>
        
        <!-- Book Form -->
        <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
            <form id="bookForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="hidden" id="bookId">
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="author">Author</label>
                    <input 
                        type="text" 
                        id="author" 
                        name="author" 
                        required 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="title">Title</label>
                    <input 
                        type="text" 
                        id="title" 
                        name="title" 
                        required 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="year">Year</label>
                    <input 
                        type="number" 
                        id="year" 
                        name="year" 
                        required 
                        min="1000"
                        max="2024"
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="isbn">ISBN</label>
                    <input 
                        type="text" 
                        id="isbn" 
                        name="isbn" 
                        required 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col col-span-1 md:col-span-2">
                    <label class="mb-2 text-gray-700" for="photo">Photo URL (Optional)</label>
                    <input 
                        type="text" 
                        id="photo" 
                        name="photo" 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="col-span-1 md:col-span-2 flex space-x-4">
                    <button 
                        type="submit" 
                        id="addButton"
                        class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-blue-700 transition duration-300"
                    >
                        Add Book
                    </button>
                    <button 
                        type="button" 
                        id="updateButton"
                        class="flex-1 bg-green-500 text-white p-3 rounded hover:bg-green-600 transition duration-300 hidden"
                    >
                        Update Book
                    </button>
                    <button 
                        type="button" 
                        id="cancelEditButton"
                        class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden"
                    >
                        Cancel
                    </button>
                </div>
            </form>
        </div>

        <!-- Books Grid -->
        <div 
            id="booksGrid" 
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6"
        >
            <!-- Books will be dynamically added here -->
        </div>

        <!-- Delete Confirmation Modal -->
        <div 
            id="deleteModal" 
            class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
        >
            <div class="bg-white rounded-lg p-6 max-w-sm w-full">
                <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
                <p class="mb-6 text-gray-600">Are you sure you want to delete this book?</p>
                <div class="flex space-x-4">
                    <button 
                        id="confirmDeleteBtn"
                        class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300"
                    >
                        Delete
                    </button>
                    <button 
                        id="cancelDeleteBtn"
                        class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300"
                    >
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const form = document.getElementById('bookForm');
        const booksGrid = document.getElementById('booksGrid');
        const addButton = document.getElementById('addButton');
        const updateButton = document.getElementById('updateButton');
        const cancelEditButton = document.getElementById('cancelEditButton');
        const deleteModal = document.getElementById('deleteModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');

        let currentDeletingBookId = null;

        // Fetch Books
        async function fetchBooks() {
            try {
                const response = await fetch('/books');
                const books = await response.json();
                renderBooks(books);
            } catch (error) {
                console.error('Error fetching books:', error);
                alert('Failed to fetch books. Please try again.');
            }
        }

        // Render Books as Cards
        function renderBooks(books) {
            booksGrid.innerHTML = books.map(book => `
                <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:scale-105">
                    <div class="p-4">
                        <h3 class="font-bold text-xl mb-2 text-gray-800 truncate">${escapeHtml(book.title)}</h3>
                        <p class="text-gray-600 mb-2">By ${escapeHtml(book.author)}</p>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-gray-500">${book.year}</span>
                            <span class="text-sm text-gray-500">${escapeHtml(book.isbn)}</span>
                        </div>
                        <div class="mt-4 flex space-x-2">
                            <button 
                                onclick="editBook('${book._id}')"
                                class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300"
                            >
                                Edit
                            </button>
                            <button 
                                onclick="confirmDelete('${book._id}')"
                                class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300"
                            >
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Escape HTML to prevent XSS
        function escapeHtml(unsafe) {
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

        // Validate Form Inputs
        function validateForm() {
            const author = document.getElementById('author').value.trim();
            const title = document.getElementById('title').value.trim();
            const year = document.getElementById('year').value;
            const isbn = document.getElementById('isbn').value.trim();

            if (author.length < 2) {
                alert('Author name must be at least 2 characters long');
                return false;
            }

            if (title.length < 2) {
                alert('Title must be at least 2 characters long');
                return false;
            }

            if (year < 1000 || year > new Date().getFullYear()) {
                alert(`Year must be between 1000 and ${new Date().getFullYear()}`);
                return false;
            }

            if (!/^(?:\d{10}|\d{13})$/.test(isbn)) {
                alert('ISBN must be 10 or 13 digits');
                return false;
            }

            return true;
        }

        // Add Book
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!validateForm()) return;

            const bookData = {
                author: document.getElementById('author').value.trim(),
                title: document.getElementById('title').value.trim(),
                year: document.getElementById('year').value,
                isbn: document.getElementById('isbn').value.trim(),
                photo: document.getElementById('photo').value.trim()
            };

            try {
                const response = await fetch('/books', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to add book');
                }

                fetchBooks();
                form.reset();
            } catch (error) {
                console.error('Error adding book:', error);
                alert(error.message);
            }
        });

        // Edit Book
        async function editBook(id) {
            try {
                const response = await fetch(`/books/${id}`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch book details');
                }
                
                const book = await response.json();
                
                document.getElementById('author').value = book.author;
                document.getElementById('title').value = book.title;
                document.getElementById('year').value = book.year;
                document.getElementById('isbn').value = book.isbn;
                document.getElementById('photo').value = book.photo || '';
                document.getElementById('bookId').value = book._id;
                
                addButton.classList.add('hidden');
                updateButton.classList.remove('hidden');
                cancelEditButton.classList.remove('hidden');
            } catch (error) {
                console.error('Error fetching book details:', error);
                alert('Failed to load book details');
            }
        }

        // Cancel Edit
        cancelEditButton.addEventListener('click', () => {
            form.reset();
            addButton.classList.remove('hidden');
            updateButton.classList.add('hidden');
            cancelEditButton.classList.add('hidden');
        });

        // Update Book
        updateButton.addEventListener('click', async () => {
            if (!validateForm()) return;

            const id = document.getElementById('bookId').value;
            const bookData = {
                author: document.getElementById('author').value.trim(),
                title: document.getElementById('title').value.trim(),
                year: document.getElementById('year').value,
                isbn: document.getElementById('isbn').value.trim(),
                photo: document.getElementById('photo').value.trim()
            };

            try {
                const response = await fetch(`/books/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(bookData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update book');
                }

                fetchBooks();
                form.reset();
                addButton.classList.remove('hidden');
                updateButton.classList.add('hidden');
                cancelEditButton.classList.add('hidden');
            } catch (error) {
                console.error('Error updating book:', error);
                alert(error.message);
            }
        });

        // Confirm Delete
        function confirmDelete(id) {
            currentDeletingBookId = id;
            deleteModal.classList.remove('hidden');
            deleteModal.classList.add('flex');
        }

        // Cancel Delete
        cancelDeleteBtn.addEventListener('click', () => {
            deleteModal.classList.add('hidden');
            deleteModal.classList.remove('flex');
            currentDeletingBookId = null;
        });

        // Confirm Delete Action
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!currentDeletingBookId) return;

            try {
                const response = await fetch(`/books/${currentDeletingBookId}`, { 
                    method: 'DELETE' 
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete book');
                }

                fetchBooks();
                deleteModal.classList.add('hidden');
                deleteModal.classList.remove('flex');
                currentDeletingBookId = null;
            } catch (error) {
                console.error('Error deleting book:', error);
                alert(error.message);
            }
        });

        // Initial fetch
        fetchBooks();
    </script>
</body>
</html>