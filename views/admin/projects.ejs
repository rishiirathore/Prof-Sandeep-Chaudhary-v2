<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Research Project Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              "brand-primary": "#10B981",
              "brand-secondary": "#3B82F6",
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gray-100 min-h-screen p-4 sm:p-6">
    <div class="container mx-auto max-w-7xl">
      <h1
        class="text-3xl sm:text-4xl font-bold text-center mb-6 sm:mb-8 text-gray-800"
      >
        Research Project Management
      </h1>

      <!-- Project Form -->
      <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
        <form id="projectForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <input type="hidden" id="projectId" />

          <div class="flex flex-col">
            <label class="mb-2 text-gray-700" for="title">Project Title</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            />
          </div>

          <div class="flex flex-col">
            <label class="mb-2 text-gray-700" for="year">Project Period</label>
            <input
              type="text"
              id="year"
              name="year"
              required
              class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
              placeholder="e.g., 2023-2024"
            />
          </div>

          <div class="flex flex-col">
            <label class="mb-2 text-gray-700" for="funded"
              >Funding Agency</label
            >
            <input
              type="text"
              id="funded"
              name="funded"
              required
              class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            />
          </div>

          <div class="flex flex-col">
            <label class="mb-2 text-gray-700" for="collaborator"
              >Collaborating Institution</label
            >
            <input
              type="text"
              id="collaborator"
              name="collaborator"
              required
              class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            />
          </div>

          <div class="flex flex-col">
            <label class="mb-2 text-gray-700" for="projectType"
              >Project Type</label
            >
            <select
              id="projectType"
              name="projectType"
              required
              class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
              onchange="updateRoleOptions()"
            >
              <option value="">Select Project Type</option>
              <option value="Sponsored Research Project">
                Sponsored Research Project
              </option>
              <option value="Consultancy Project">Consultancy Project</option>
              <option value="Others">Others</option>
            </select>
          </div>

          <div class="flex flex-col" id="roleContainer">
            <label class="mb-2 text-gray-700" for="role">Your Role</label>
            <select 
                id="role" 
                name="role" 
                required 
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            >
                <option value="">Select Role</option>
            </select>
        </div>

          <div class="col-span-1 md:col-span-2 flex space-x-4">
            <button
              type="submit"
              id="addButton"
              class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-green-700 transition duration-300"
            >
              Add Research Project
            </button>
            <button
              type="button"
              id="updateButton"
              class="flex-1 bg-blue-500 text-white p-3 rounded hover:bg-blue-600 transition duration-300 hidden"
            >
              Update Project
            </button>
            <button
              type="button"
              id="cancelEditButton"
              class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>

      <!-- Search and Filter Section -->
      <div class="mb-6 flex flex-wrap gap-4">
        <input
          type="text"
          id="searchInput"
          placeholder="Search research projects..."
          class="flex-grow border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
        />
        <select
          id="typeFilter"
          class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
        >
          <option value="">All Project Types</option>
          <option value="Sponsored Research Project">
            Sponsored Research Project
          </option>
          <option value="Consultancy Project">Consultancy Project</option>
          <option value="Others">Others</option>
        </select>
        <button
          id="searchButton"
          class="bg-brand-primary text-white p-2 rounded hover:bg-green-700 transition duration-300"
        >
          Search
        </button>
      </div>

      <!-- Research Projects Grid -->
      <div
        id="projectsGrid"
        class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6"
      >
        <!-- Research projects will be dynamically added here -->
      </div>

      <!-- Delete Confirmation Modal -->
      <div
        id="deleteModal"
        class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
      >
        <div class="bg-white rounded-lg p-6 max-w-sm w-full">
          <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
          <p class="mb-6 text-gray-600">
            Are you sure you want to delete this research project?
          </p>
          <div class="flex space-x-4">
            <button
              id="confirmDeleteBtn"
              class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300"
            >
              Delete
            </button>
            <button
              id="cancelDeleteBtn"
              class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // DOM Elements
      const form = document.getElementById("projectForm");
      const projectsGrid = document.getElementById("projectsGrid");
      const addButton = document.getElementById("addButton");
      const updateButton = document.getElementById("updateButton");
      const cancelEditButton = document.getElementById("cancelEditButton");
      const deleteModal = document.getElementById("deleteModal");
      const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
      const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
      const searchInput = document.getElementById("searchInput");
      const typeFilter = document.getElementById("typeFilter");
      const searchButton = document.getElementById("searchButton");
      const projectTypeSelect = document.getElementById("projectType");
      const roleSelect = document.getElementById("role");

      let currentDeletingProjectId = null;
      let projects = []; // Store projects for filtering

      // Update role options based on project type
      function updateRoleOptions() {
        const projectType = projectTypeSelect.value;

        // Get a fresh reference to the role input container
        const roleContainer = document.getElementById("roleContainer");

        if (projectType === "Sponsored Research Project") {
          // Replace with a select for Sponsored Research Project
          roleContainer.innerHTML = `
            <label class="mb-2 text-gray-700" for="role">Your Role</label>
            <select 
                id="role" 
                name="role" 
                required 
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            >
                <option value="">Select Role</option>
                <option value="As Principal Investigator">As Principal Investigator</option>
                <option value="As Co-Principal Investigator">As Co-Principal Investigator</option>
                <option value="As Scientist Mentor">As Scientist Mentor</option>
                <option value="As a Guide">As a Guide</option>
            </select>
        `;
        } else {
          // Replace with a text input for other project types
          roleContainer.innerHTML = `
            <label class="mb-2 text-gray-700" for="role">Your Role</label>
            <input 
                type="text" 
                id="role" 
                name="role" 
                required 
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                placeholder="Enter your role"
            >
        `;
        }
      }

      // Fetch Research Projects
      async function fetchProjects() {
        try {
          const response = await fetch("/projects");
          projects = await response.json();
          renderProjects(projects);
        } catch (error) {
          console.error("Error fetching projects:", error);
        }
      }

      // Render Research Projects as Cards
      function renderProjects(projects) {
        projectsGrid.innerHTML = projects
          .map(
            (project) => `
                <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:scale-105">
                    <div class="p-4">
                        <h3 class="font-bold text-lg mb-2 text-gray-800 line-clamp-2">${escapeHtml(
                          project.title
                        )}</h3>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-gray-500">${escapeHtml(
                              project.year
                            )}</span>
                            <span class="text-sm text-green-600">${escapeHtml(
                              project.projectType
                            )}</span>
                        </div>
                        <p class="text-gray-600 text-sm mb-2 line-clamp-1"><strong>Role:</strong> ${escapeHtml(
                          project.role
                        )}</p>
                        <p class="text-gray-600 text-sm mb-2 line-clamp-1"><strong>Funded by:</strong> ${escapeHtml(
                          project.funded
                        )}</p>
                        <p class="text-gray-600 text-sm mb-2 line-clamp-1"><strong>Collaborator:</strong> ${escapeHtml(
                          project.collaborator
                        )}</p>
                        <div class="mt-4 flex space-x-2">
                            <button 
                                onclick="editProject('${project._id}')"
                                class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300"
                            >
                                Edit
                            </button>
                            <button 
                                onclick="confirmDelete('${project._id}')"
                                class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300"
                            >
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            `
          )
          .join("");
      }

      // Search and Filter Research Projects
      function searchAndFilterProjects() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const selectedType = typeFilter.value;

        const filteredProjects = projects.filter((proj) => {
          const matchesSearch =
            searchTerm === "" ||
            proj.title.toLowerCase().includes(searchTerm) ||
            proj.funded.toLowerCase().includes(searchTerm) ||
            proj.collaborator.toLowerCase().includes(searchTerm) ||
            proj.role.toLowerCase().includes(searchTerm);

          const matchesType =
            selectedType === "" || proj.projectType === selectedType;

          return matchesSearch && matchesType;
        });

        renderProjects(filteredProjects);
      }

      // Attach search event listeners
      searchButton.addEventListener("click", searchAndFilterProjects);
      searchInput.addEventListener("input", searchAndFilterProjects);
      typeFilter.addEventListener("change", searchAndFilterProjects);

      // Escape HTML to prevent XSS
      function escapeHtml(unsafe) {
        return unsafe
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }

      // Validate Form Inputs
      function validateForm() {
        const title = document.getElementById("title").value.trim();
        const year = document.getElementById("year").value.trim();
        const funded = document.getElementById("funded").value.trim();
        const collaborator = document
          .getElementById("collaborator")
          .value.trim();
        const projectType = document.getElementById("projectType").value;
        const role = document.getElementById("role").value;

        if (title.length < 5) {
          alert("Project title must be at least 5 characters long");
          return false;
        }

        if (year.length < 4) {
          alert("Project period must be valid");
          return false;
        }

        if (funded.length < 2) {
          alert("Funding agency must be at least 2 characters long");
          return false;
        }

        if (collaborator.length < 2) {
          alert("Collaborator must be at least 2 characters long");
          return false;
        }

        if (!projectType) {
          alert("Please select a project type");
          return false;
        }

        if (!role) {
          alert("Please specify your role in the project");
          return false;
        }

        return true;
      }

      // Add Research Project
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (!validateForm()) return;

        const projectData = {
          title: document.getElementById("title").value.trim(),
          year: document.getElementById("year").value.trim(),
          funded: document.getElementById("funded").value.trim(),
          collaborator: document.getElementById("collaborator").value.trim(),
          projectType: document.getElementById("projectType").value,
          role: document.getElementById("role").value,
        };

        try {
          const response = await fetch("/projects", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(projectData),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.message || "Failed to add research project"
            );
          }

          await fetchProjects();
          form.reset();
          // Re-initialize the role select after form reset
          updateRoleOptions();
        } catch (error) {
          console.error("Error adding research project:", error);
          // For demo, just add to our local array
          const newProject = {
            _id: Date.now().toString(),
            ...projectData,
          };
          projects.push(newProject);
          renderProjects(projects);
          form.reset();
          updateRoleOptions();
        }
      });

      // Edit Research Project
      async function editProject(id) {
        try {
          // For production, fetch from server
          // const response = await fetch(`/projects/${id}`);
          // if (!response.ok) {
          //     throw new Error('Failed to fetch project details');
          // }
          // const project = await response.json();

          // For demo, find in our local array
          const project = projects.find((p) => p._id === id);
          if (!project) {
            throw new Error("Project not found");
          }

          document.getElementById("title").value = project.title;
          document.getElementById("year").value = project.year;
          document.getElementById("funded").value = project.funded;
          document.getElementById("collaborator").value = project.collaborator;
          document.getElementById("projectType").value = project.projectType;

          // Update role options based on project type
          updateRoleOptions();

          // If role select was replaced with input, find it again
          const roleInput = document.getElementById("role");
          if (roleInput) {
            roleInput.value = project.role;
          }

          document.getElementById("projectId").value = project._id;

          addButton.classList.add("hidden");
          updateButton.classList.remove("hidden");
          cancelEditButton.classList.remove("hidden");
        } catch (error) {
          console.error("Error fetching project details:", error);
          alert("Failed to load project details");
        }
      }

      // Cancel Edit
      cancelEditButton.addEventListener("click", () => {
        form.reset();
        updateRoleOptions();
        addButton.classList.remove("hidden");
        updateButton.classList.add("hidden");
        cancelEditButton.classList.add("hidden");
      });

      // Update Research Project
      updateButton.addEventListener("click", async () => {
        if (!validateForm()) return;

        const id = document.getElementById("projectId").value;
        const projectData = {
          title: document.getElementById("title").value.trim(),
          year: document.getElementById("year").value.trim(),
          funded: document.getElementById("funded").value.trim(),
          collaborator: document.getElementById("collaborator").value.trim(),
          projectType: document.getElementById("projectType").value,
          role: document.getElementById("role").value,
        };

        try {
          const response = await fetch(`/projects/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(projectData),
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.message || "Failed to update research project"
            );
          }

          await fetchProjects();
          form.reset();
          updateRoleOptions();
          addButton.classList.remove("hidden");
          updateButton.classList.add("hidden");
          cancelEditButton.classList.add("hidden");
        } catch (error) {
          console.error("Error updating research project:", error);
          // For demo, update in our local array
          const index = projects.findIndex((p) => p._id === id);
          if (index !== -1) {
            projects[index] = { _id: id, ...projectData };
            renderProjects(projects);
            form.reset();
            updateRoleOptions();
            addButton.classList.remove("hidden");
            updateButton.classList.add("hidden");
            cancelEditButton.classList.add("hidden");
          }
        }
      });

      // Confirm Delete
      function confirmDelete(id) {
        currentDeletingProjectId = id;
        deleteModal.classList.remove("hidden");
        deleteModal.classList.add("flex");
      }

      // Cancel Delete
      cancelDeleteBtn.addEventListener("click", () => {
        deleteModal.classList.add("hidden");
        deleteModal.classList.remove("flex");
        currentDeletingProjectId = null;
      });

      // Confirm Delete Action
      confirmDeleteBtn.addEventListener("click", async () => {
        if (!currentDeletingProjectId) return;

        try {
          const response = await fetch(
            `/projects/${currentDeletingProjectId}`,
            {
              method: "DELETE",
            }
          );

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(
              errorData.message || "Failed to delete research project"
            );
          }

          await fetchProjects();
          deleteModal.classList.add("hidden");
          deleteModal.classList.remove("flex");
          currentDeletingProjectId = null;
        } catch (error) {
          console.error("Error deleting research project:", error);
          // For demo, remove from our local array
          projects = projects.filter((p) => p._id !== currentDeletingProjectId);
          renderProjects(projects);
          deleteModal.classList.add("hidden");
          deleteModal.classList.remove("flex");
          currentDeletingProjectId = null;
        }
      });

      // Initialize role options
      updateRoleOptions();

      // Initial fetch
      fetchProjects();
    </script>
  </body>
</html>
