<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Management System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
</head>

<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-8">File Management System</h1>

        <!-- Upload Form -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4 text-gray-700">Upload New File</h2>
            <form id="uploadForm" class="space-y-4">
                <div>
                    <label for="fileName" class="block text-sm font-medium text-gray-700 mb-1">File Name</label>
                    <input type="text" id="fileName" name="fileName" required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>

                <div>
                    <label for="fileDescription"
                        class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <textarea id="fileDescription" name="fileDescription" rows="3"
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"></textarea>
                </div>

                <div>
                    <label for="fileUpload" class="block text-sm font-medium text-gray-700 mb-1">Select File</label>
                    <input type="file" id="fileUpload" name="file" required
                        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>

                <div>
                    <button type="submit"
                        class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <i class="fas fa-cloud-upload-alt mr-2"></i> Upload File
                    </button>
                </div>
            </form>
            <div id="uploadStatus" class="mt-4 hidden">
                <div class="flex items-center">
                    <div class="spinner mr-3">
                        <div class="w-5 h-5 rounded-full border-2 border-indigo-600 border-t-transparent animate-spin">
                        </div>
                    </div>
                    <p class="text-sm text-gray-600">Uploading file...</p>
                </div>
            </div>
        </div>

        <!-- Files List with Search -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-4">
                <h2 class="text-xl font-semibold text-gray-700 mb-2 md:mb-0">Your Files</h2>
                <div class="relative w-full md:w-64">
                    <input type="text" id="searchInput" placeholder="Search files..."
                        class="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <div class="absolute left-3 top-2.5 text-gray-400">
                        <i class="fas fa-search"></i>
                    </div>
                    <button id="clearSearch" class="absolute right-3 top-2.5 text-gray-400 hover:text-gray-600 hidden">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>

            <div id="searchInfo" class="mb-3 text-sm text-gray-500 hidden">
                Showing results for "<span id="searchTerm"></span>"
                <button id="resetSearch" class="ml-2 text-indigo-600 hover:text-indigo-800">
                    Reset
                </button>
            </div>

            <div id="filesList" class="space-y-4">
                <div class="text-center py-8 text-gray-500 italic">
                    Loading files...
                </div>
            </div>

            <div id="noSearchResults" class="text-center py-8 text-gray-500 italic hidden">
                No files match your search criteria.
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div id="toastContainer" class="fixed bottom-4 right-4 w-72"></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const uploadForm = document.getElementById('uploadForm');
            const filesList = document.getElementById('filesList');
            const uploadStatus = document.getElementById('uploadStatus');
            const searchInput = document.getElementById('searchInput');
            const clearSearch = document.getElementById('clearSearch');
            const searchInfo = document.getElementById('searchInfo');
            const searchTerm = document.getElementById('searchTerm');
            const resetSearch = document.getElementById('resetSearch');
            const noSearchResults = document.getElementById('noSearchResults');

            let allFiles = []; // Store all files for client-side filtering

            // Fetch and display files on page load
            fetchFiles();

            // Handle file upload
            uploadForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                const formData = new FormData();
                const fileInput = document.getElementById('fileUpload');
                const fileName = document.getElementById('fileName').value;
                const fileDescription = document.getElementById('fileDescription').value;

                if (!fileInput.files[0]) {
                    showToast('Please select a file to upload', 'error');
                    return;
                }

                formData.append('file', fileInput.files[0]);
                formData.append('fileName', fileName);
                formData.append('fileDescription', fileDescription);

                try {
                    uploadStatus.classList.remove('hidden');

                    const response = await fetch('/api/files/upload', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Failed to upload file');
                    }

                    const result = await response.json();

                    // Reset form
                    uploadForm.reset();
                    showToast('File uploaded successfully!', 'success');

                    // Clear search if active
                    if (searchInput.value) {
                        clearSearchField();
                    }

                    // Refresh files list
                    fetchFiles();
                } catch (error) {
                    showToast(error.message, 'error');
                } finally {
                    uploadStatus.classList.add('hidden');
                }
            });

            // Fetch all files
            async function fetchFiles() {
                try {
                    filesList.innerHTML = '<div class="text-center py-8 text-gray-500 italic">Loading files...</div>';

                    const response = await fetch('/api/files');

                    if (!response.ok) {
                        throw new Error('Failed to fetch files');
                    }

                    allFiles = await response.json();

                    // Show all files or filtered results if search is active
                    if (searchInput.value) {
                        filterFiles(searchInput.value);
                    } else {
                        renderFiles(allFiles);
                    }
                } catch (error) {
                    filesList.innerHTML = `
                        <div class="text-center py-8 text-red-500">
                            <p>Error loading files</p>
                            <p class="text-sm mt-2">${error.message}</p>
                        </div>
                    `;
                }
            }

            // Render files to the DOM
            function renderFiles(files) {
                if (files.length === 0) {
                    filesList.innerHTML = '<div class="text-center py-8 text-gray-500 italic">No files uploaded yet.</div>';
                    noSearchResults.classList.add('hidden');
                    return;
                }

                filesList.innerHTML = '';
                noSearchResults.classList.add('hidden');

                files.forEach(file => {
                    const fileSize = formatFileSize(file.size);
                    const fileDate = new Date(file.uploadDate).toLocaleString();

                    const fileElement = document.createElement('div');
                    fileElement.className = 'border rounded-lg p-4 hover:bg-gray-50 transition';
                    fileElement.innerHTML = `
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <h3 class="font-medium text-gray-900">${file.fileName}</h3>
                                <div class="mt-1 text-sm text-gray-500">
                                    <p>${file.description || 'No description'}</p>
                                    <p class="mt-1">Size: ${fileSize} â€¢ Uploaded: ${fileDate}</p>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button 
                                    class="text-indigo-600 hover:text-indigo-800 px-2 py-1 rounded"
                                    title="Download File"
                                    onclick="downloadFile('${file._id}', '${file.fileName}')"
                                >
                                    <i class="fas fa-download"></i>
                                </button>
                                <button 
                                    class="text-red-600 hover:text-red-800 px-2 py-1 rounded"
                                    title="Delete File"
                                    onclick="deleteFile('${file._id}')"
                                >
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </div>
                    `;
                    filesList.appendChild(fileElement);
                });
            }

            // Filter files based on search term
            function filterFiles(term) {
                if (!term.trim()) {
                    renderFiles(allFiles);
                    searchInfo.classList.add('hidden');
                    return;
                }

                const searchLower = term.toLowerCase();
                const filteredFiles = allFiles.filter(file =>
                    file.fileName.toLowerCase().includes(searchLower) ||
                    (file.description && file.description.toLowerCase().includes(searchLower))
                );

                if (filteredFiles.length === 0) {
                    filesList.innerHTML = '';
                    noSearchResults.classList.remove('hidden');
                } else {
                    noSearchResults.classList.add('hidden');
                    renderFiles(filteredFiles);
                }

                // Update search info display
                searchTerm.textContent = term;
                searchInfo.classList.remove('hidden');
            }

            // Search input event handlers
            searchInput.addEventListener('input', function () {
                const term = this.value;
                filterFiles(term);

                // Toggle clear button visibility
                if (term) {
                    clearSearch.classList.remove('hidden');
                } else {
                    clearSearch.classList.add('hidden');
                    searchInfo.classList.add('hidden');
                }
            });

            // Clear search button
            clearSearch.addEventListener('click', clearSearchField);

            // Reset search button
            resetSearch.addEventListener('click', clearSearchField);

            // Function to clear search field and reset results
            function clearSearchField() {
                searchInput.value = '';
                clearSearch.classList.add('hidden');
                searchInfo.classList.add('hidden');
                renderFiles(allFiles);
            }

            // Format file size
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';

                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));

                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            // Show toast notification
            window.showToast = function (message, type = 'info') {
                const toastContainer = document.getElementById('toastContainer');
                const toast = document.createElement('div');

                let bgColor = 'bg-blue-500';
                let icon = 'fa-info-circle';

                if (type === 'success') {
                    bgColor = 'bg-green-500';
                    icon = 'fa-check-circle';
                } else if (type === 'error') {
                    bgColor = 'bg-red-500';
                    icon = 'fa-exclamation-circle';
                } else if (type === 'warning') {
                    bgColor = 'bg-yellow-500';
                    icon = 'fa-exclamation-triangle';
                }

                toast.className = `${bgColor} text-white p-3 rounded-md shadow-md mb-2 flex items-center animate-fade-in`;
                toast.innerHTML = `
                    <i class="fas ${icon} mr-2"></i>
                    <span>${message}</span>
                `;

                toastContainer.appendChild(toast);

                // Auto remove toast after 5 seconds
                setTimeout(() => {
                    toast.classList.add('animate-fade-out');
                    setTimeout(() => {
                        toast.remove();
                    }, 300);
                }, 5000);
            };

            // Download file
            window.downloadFile = async function (fileId, fileName) {
                try {
                    const response = await fetch(`/api/files/download/${fileId}`);

                    if (!response.ok) {
                        throw new Error('Failed to download file');
                    }

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = fileName;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    a.remove();

                    showToast('File download started', 'success');
                } catch (error) {
                    showToast(error.message, 'error');
                }
            };

            // Delete file
            window.deleteFile = async function (fileId) {
                if (!confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
                    return;
                }

                try {
                    const response = await fetch(`/api/files/${fileId}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) {
                        throw new Error('Failed to delete file');
                    }

                    showToast('File deleted successfully', 'success');
                    fetchFiles();
                } catch (error) {
                    showToast(error.message, 'error');
                }
            };
        });
    </script>

    <style>
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
                transform: translateY(0);
            }

            to {
                opacity: 0;
                transform: translateY(10px);
            }
        }

        .animate-fade-in {
            animation: fadeIn 0.3s ease-in-out forwards;
        }

        .animate-fade-out {
            animation: fadeOut 0.3s ease-in-out forwards;
        }
    </style>
</body>

</html>