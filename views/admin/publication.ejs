<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Research Publications Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'brand-primary': '#3B82F6',
                        'brand-secondary': '#10B981',
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gray-100 min-h-screen p-4 sm:p-6">
    <div class="container mx-auto max-w-7xl">
        <h1 class="text-3xl sm:text-4xl font-bold text-center mb-6 sm:mb-8 text-gray-800">Research Publications Management</h1>
        
        <!-- Publication Form -->
        <div class="bg-white shadow-md rounded-lg p-4 sm:p-6 mb-6 sm:mb-8">
            <form id="publicationForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <input type="hidden" id="publicationId">
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="author">Authors</label>
                    <input 
                        type="text" 
                        id="author" 
                        name="author" 
                        required 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                        placeholder="Lastname, F.N. et al."
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="title">Publication Title</label>
                    <input 
                        type="text" 
                        id="title" 
                        name="title" 
                        required 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="journal">Journal Name</label>
                    <input 
                        type="text" 
                        id="journal" 
                        name="journal" 
                        required 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="year">Publication Year</label>
                    <input 
                        type="number" 
                        id="year" 
                        name="year" 
                        required 
                        min="1900"
                        max="2100"
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="volumePages">Volume/Pages</label>
                    <input 
                        type="text" 
                        id="volumePages" 
                        name="volumePages" 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                        placeholder="e.g., Vol 25, pp. 100-110"
                    >
                </div>
                
                <div class="flex flex-col">
                    <label class="mb-2 text-gray-700" for="impactFactor">Impact Factor</label>
                    <input 
                        type="number" 
                        id="impactFactor" 
                        name="impactFactor" 
                        step="0.01"
                        min="0"
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                    >
                </div>
                
                <div class="flex flex-col col-span-1 md:col-span-2">
                    <label class="mb-2 text-gray-700" for="publicationLink">Publication Link</label>
                    <input 
                        type="url" 
                        id="publicationLink" 
                        name="publicationLink" 
                        class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
                        placeholder="https://doi.org/..."
                    >
                </div>
                
                <div class="col-span-1 md:col-span-2 flex space-x-4">
                    <button 
                        type="submit" 
                        id="addButton"
                        class="flex-1 bg-brand-primary text-white p-3 rounded hover:bg-blue-700 transition duration-300"
                    >
                        Add Publication
                    </button>
                    <button 
                        type="button" 
                        id="updateButton"
                        class="flex-1 bg-green-500 text-white p-3 rounded hover:bg-green-600 transition duration-300 hidden"
                    >
                        Update Publication
                    </button>
                    <button 
                        type="button" 
                        id="cancelEditButton"
                        class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300 hidden"
                    >
                        Cancel
                    </button>
                </div>
            </form>
        </div>

        <!-- Search and Filter Section -->
        <div class="mb-6 flex flex-wrap gap-4">
            <input 
                type="text" 
                id="searchInput" 
                placeholder="Search publications..."
                class="flex-grow border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            >
            <select 
                id="yearFilter"
                class="border border-gray-300 p-2 rounded focus:outline-none focus:ring-2 focus:ring-brand-primary"
            >
                <option value="">All Years</option>
            </select>
            <button 
                id="searchButton"
                class="bg-brand-primary text-white p-2 rounded hover:bg-blue-700 transition duration-300"
            >
                Search
            </button>
        </div>

        <!-- Publications Grid -->
        <div 
            id="publicationsGrid" 
            class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6"
        >
            <!-- Publications will be dynamically added here -->
        </div>

        <!-- Delete Confirmation Modal -->
        <div 
            id="deleteModal" 
            class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center p-4"
        >
            <div class="bg-white rounded-lg p-6 max-w-sm w-full">
                <h2 class="text-xl font-bold mb-4 text-gray-800">Confirm Deletion</h2>
                <p class="mb-6 text-gray-600">Are you sure you want to delete this publication?</p>
                <div class="flex space-x-4">
                    <button 
                        id="confirmDeleteBtn"
                        class="flex-1 bg-red-500 text-white p-3 rounded hover:bg-red-600 transition duration-300"
                    >
                        Delete
                    </button>
                    <button 
                        id="cancelDeleteBtn"
                        class="flex-1 bg-gray-500 text-white p-3 rounded hover:bg-gray-600 transition duration-300"
                    >
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const form = document.getElementById('publicationForm');
        const publicationsGrid = document.getElementById('publicationsGrid');
        const addButton = document.getElementById('addButton');
        const updateButton = document.getElementById('updateButton');
        const cancelEditButton = document.getElementById('cancelEditButton');
        const deleteModal = document.getElementById('deleteModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const searchInput = document.getElementById('searchInput');
        const yearFilter = document.getElementById('yearFilter');
        const searchButton = document.getElementById('searchButton');

        let currentDeletingPublicationId = null;
        let publications = []; // Store publications for filtering

        // Fetch Publications
        async function fetchPublications() {
            try {
                const response = await fetch('/publications');
                publications = await response.json();
                renderPublications(publications);
                populateYearFilter(publications);
            } catch (error) {
                console.error('Error fetching publications:', error);
                alert('Failed to fetch publications. Please try again.');
            }
        }

        // Populate Year Filter Dropdown
        function populateYearFilter(pubs) {
            const years = [...new Set(pubs.map(pub => pub.year))].sort((a, b) => b - a);
            yearFilter.innerHTML = '<option value="">All Years</option>';
            years.forEach(year => {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year;
                yearFilter.appendChild(option);
            });
        }

        // Render Publications as Cards
        function renderPublications(pubs) {
            publicationsGrid.innerHTML = pubs.map(publication => `
                <div class="bg-white shadow-md rounded-lg overflow-hidden transform transition duration-300 hover:scale-105">
                    <div class="p-4">
                        <h3 class="font-bold text-lg mb-2 text-gray-800 line-clamp-2">${escapeHtml(publication.title)}</h3>
                        <p class="text-gray-600 text-sm mb-2 italic line-clamp-1">${escapeHtml(publication.author)}</p>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-gray-500 line-clamp-1">${escapeHtml(publication.journal)}</span>
                            <span class="text-sm text-gray-500">${publication.year}</span>
                        </div>
                        <div class="flex justify-between items-center mb-2">
                            <span class="text-sm text-blue-600">Impact Factor: ${publication.impactFactor.toFixed(2)}</span>
                            ${publication.publicationLink ? `
                                <a 
                                    href="${publication.publicationLink}" 
                                    target="_blank" 
                                    class="text-sm text-brand-primary hover:underline"
                                >
                                    View Publication
                                </a>
                            ` : ''}
                        </div>
                        <div class="mt-4 flex space-x-2">
                            <button 
                                onclick="editPublication('${publication._id}')"
                                class="flex-1 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600 transition duration-300"
                            >
                                Edit
                            </button>
                            <button 
                                onclick="confirmDelete('${publication._id}')"
                                class="flex-1 bg-red-500 text-white p-2 rounded hover:bg-red-600 transition duration-300"
                            >
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Search and Filter Publications
        function searchAndFilterPublications() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            const selectedYear = yearFilter.value;

            const filteredPublications = publications.filter(pub => {
                const matchesSearch = searchTerm === '' || 
                    pub.title.toLowerCase().includes(searchTerm) || 
                    pub.author.toLowerCase().includes(searchTerm) ||
                    pub.journal.toLowerCase().includes(searchTerm);
                
                const matchesYear = selectedYear === '' || 
                    pub.year.toString() === selectedYear;
                
                return matchesSearch && matchesYear;
            });

            renderPublications(filteredPublications);
        }

        // Attach search event listeners
        searchButton.addEventListener('click', searchAndFilterPublications);
        searchInput.addEventListener('input', searchAndFilterPublications);
        yearFilter.addEventListener('change', searchAndFilterPublications);

        // Escape HTML to prevent XSS
        function escapeHtml(unsafe) {
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

        // Validate Form Inputs
        function validateForm() {
            const author = document.getElementById('author').value.trim();
            const title = document.getElementById('title').value.trim();
            const journal = document.getElementById('journal').value.trim();
            const year = document.getElementById('year').value;
            const publicationLink = document.getElementById('publicationLink').value.trim();

            if (author.length < 3) {
                alert('Author names must be at least 3 characters long');
                return false;
            }

            if (title.length < 5) {
                alert('Title must be at least 5 characters long');
                return false;
            }

            if (journal.length < 3) {
                alert('Journal name must be at least 3 characters long');
                return false;
            }

            if (year < 1900 || year > new Date().getFullYear()) {
                alert(`Year must be between 1900 and ${new Date().getFullYear()}`);
                return false;
            }

            if (publicationLink && !publicationLink.startsWith('http')) {
                alert('Publication link must be a valid URL');
                return false;
            }

            return true;
        }

        // Add Publication
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            if (!validateForm()) return;

            const publicationData = {
                author: document.getElementById('author').value.trim(),
                title: document.getElementById('title').value.trim(),
                journal: document.getElementById('journal').value.trim(),
                year: document.getElementById('year').value,
                volumePages: document.getElementById('volumePages').value.trim(),
                publicationLink: document.getElementById('publicationLink').value.trim(),
                impactFactor: document.getElementById('impactFactor').value || 0
            };

            try {
                const response = await fetch('/publications', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(publicationData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to add publication');
                }

                await fetchPublications();
                form.reset();
            } catch (error) {
                console.error('Error adding publication:', error);
                alert(error.message);
            }
        });

        // Edit Publication
        async function editPublication(id) {
            try {
                const response = await fetch(`/publications/${id}`);
                
                if (!response.ok) {
                    throw new Error('Failed to fetch publication details');
                }
                
                const publication = await response.json();
                
                document.getElementById('author').value = publication.author;
                document.getElementById('title').value = publication.title;
                document.getElementById('journal').value = publication.journal;
                document.getElementById('year').value = publication.year;
                document.getElementById('volumePages').value = publication.volumePages || '';
                document.getElementById('publicationLink').value = publication.publicationLink || '';
                document.getElementById('impactFactor').value = publication.impactFactor || '';
                document.getElementById('publicationId').value = publication._id;
                
                addButton.classList.add('hidden');
                updateButton.classList.remove('hidden');
                cancelEditButton.classList.remove('hidden');
            } catch (error) {
                console.error('Error fetching publication details:', error);
                alert('Failed to load publication details');
            }
        }

        // Cancel Edit
        cancelEditButton.addEventListener('click', () => {
            form.reset();
            addButton.classList.remove('hidden');
            updateButton.classList.add('hidden');
            cancelEditButton.classList.add('hidden');
        });

        // Update Publication
        updateButton.addEventListener('click', async () => {
            if (!validateForm()) return;

            const id = document.getElementById('publicationId').value;
            const publicationData = {
                author: document.getElementById('author').value.trim(),
                title: document.getElementById('title').value.trim(),
                journal: document.getElementById('journal').value.trim(),
                year: document.getElementById('year').value,
                volumePages: document.getElementById('volumePages').value.trim(),
                publicationLink: document.getElementById('publicationLink').value.trim(),
                impactFactor: document.getElementById('impactFactor').value || 0
            };

            try {
                const response = await fetch(`/publications/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(publicationData)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to update publication');
                }

                await fetchPublications();
                form.reset();
                addButton.classList.remove('hidden');
                updateButton.classList.add('hidden');
                cancelEditButton.classList.add('hidden');
            } catch (error) {
                console.error('Error updating publication:', error);
                alert(error.message);
            }
        });

        // Confirm Delete
        function confirmDelete(id) {
            currentDeletingPublicationId = id;
            deleteModal.classList.remove('hidden');
            deleteModal.classList.add('flex');
        }

        // Cancel Delete
        cancelDeleteBtn.addEventListener('click', () => {
            deleteModal.classList.add('hidden');
            deleteModal.classList.remove('flex');
            currentDeletingPublicationId = null;
        });

        // Confirm Delete Action
        confirmDeleteBtn.addEventListener('click', async () => {
            if (!currentDeletingPublicationId) return;

            try {
                const response = await fetch(`/publications/${currentDeletingPublicationId}`, { 
                    method: 'DELETE' 
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to delete publication');
                }

                await fetchPublications();
                deleteModal.classList.add('hidden');
                deleteModal.classList.remove('flex');
                currentDeletingPublicationId = null;
            } catch (error) {
                console.error('Error deleting publication:', error);
                alert(error.message);
            }
        });

        // Initial fetch
        fetchPublications();
    </script>
</body>
</html>